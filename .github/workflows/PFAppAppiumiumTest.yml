name: Appium Tests

on:
  push:
    branches:  
      - test
      - master
  pull_request:

jobs:
  appium-test:
    runs-on: ubuntu-latest
    timeout-minutes: 40  # Increased timeout for stability

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (for Appium tests)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Node.js (for Appium Server)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Maven Dependencies
        run: mvn clean install -DskipTests

      - name: Install Appium & Dependencies
        run: |
          npm install -g appium
          appium -v
          npm install -g appium-doctor
          appium-doctor

      - name: Start Appium Server in Background
        run: appium --log appium.log &

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Required Android System Image & Platform Tools
        run: |
          echo "y" | sdkmanager --install "platform-tools" "platforms;android-31" "system-images;android-31;google_apis_playstore;x86_64"
          echo "y" | sdkmanager --install "build-tools;31.0.0" "cmdline-tools;latest" "emulator"

      - name: Install Missing Dependencies
        run: sudo apt-get update && sudo apt-get install -y libpulse0

      - name: Add Android SDK Tools to PATH
        run: |
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_AVD_HOME=$HOME/.android/avd" >> $GITHUB_ENV
          export ANDROID_HOME=/usr/local/lib/android/sdk
          export PATH=$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$PATH
          echo "Updated PATH: $PATH"

      - name: Ensure Emulator is Installed
        run: |
          if [ ! -f "$ANDROID_HOME/emulator/emulator" ]; then
            echo "Emulator binary not found! Reinstalling..."
            echo "y" | sdkmanager --install "emulator"
          fi
          $ANDROID_HOME/emulator/emulator -version

      - name: Ensure AVD Directory Exists
        run: mkdir -p $ANDROID_AVD_HOME

      - name: Create Android Emulator (MFSEmulator)
        run: |
          if $ANDROID_HOME/emulator/emulator -list-avds | grep -q "MFSEmulator"; then
            echo "AVD already exists, skipping creation."
          else
            echo "Creating AVD..."
            echo "y" | sdkmanager --install "system-images;android-31;google_apis_playstore;x86_64"
            echo "no" | avdmanager create avd -n MFSEmulator -k "system-images;android-31;google_apis_playstore;x86_64" --device "pixel_4" --force
          fi

      - name: Verify Emulator Availability
        run: |
          echo "Checking available AVDs..."
          $ANDROID_HOME/emulator/emulator -list-avds
          
          if ! $ANDROID_HOME/emulator/emulator -list-avds | grep -q "MFSEmulator"; then
            echo "ERROR: AVD 'MFSEmulator' was not created successfully!"
            exit 1
          fi

      - name: Start Android Emulator
        run: |
          nohup $ANDROID_HOME/emulator/emulator -avd MFSEmulator -no-window -no-audio -gpu swiftshader_indirect &

      - name: Wait for Emulator to Boot
        run: |
          adb wait-for-device
          boot_completed=""
          while [ -z "$boot_completed" ]; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>&1 | tr -d '\r')
            echo "Waiting for emulator to fully boot..."
            sleep 10
          done
          echo "Emulator is ready!"
          adb devices

      - name: Verify Emulator is Running
        run: adb shell getprop ro.build.version.release

      - name: Install ProFoamApp APK on Emulator
        run: adb install resources/App/ProFoamApp-release.apk

      - name: Run Appium Tests
        run: mvn clean test

      - name: Check if Appium is running and save logs
        run: |
          if ps aux | grep -v grep | grep appium; then
            echo "Appium is running, saving logs..."
            cp appium.log appium.log.backup
            ls -l appium.log
          else
            echo "Appium is not running, skipping log upload."
          fi

      - name: Check if test reports exist
        id: check_reports
        run: |
          if [ -z "$(ls -A target/surefire-reports/*.xml 2>/dev/null)" ]; then
            echo "No test reports found, skipping artifact upload."
            echo "reports_found=false" >> $GITHUB_ENV
          else
            echo "Test reports found."
            echo "reports_found=true" >> $GITHUB_ENV
          fi

      - name: Save Test Reports
        if: env.reports_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports/*.xml

      - name: Save Appium Logs
        if: always() && success() && steps.check-if-appium-running.outputs.appium-status == 'running'
        uses: actions/upload-artifact@v4
        with:
          name: appium-logs
          path: appium.log

      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
